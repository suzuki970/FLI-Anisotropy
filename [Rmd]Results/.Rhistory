# # round(exp(bf@bayesFactor[["bf"]]),3)
# sig = t.test(x,y,var.equal=T,paired=T)
# AUC_table_peak = list(list(
#   anovaTab = sig,
#   cohen_d   = abs(round(sig[["statistic"]][["t"]] / sqrt(n),3)),
#   bf       = round(exp(bf@bayesFactor[["bf"]]),3)
# ))
# names(AUC_table) <- c('AUC_table')
#
# anovaTabAll = c(anovaTabAll,AUC_table)
# #### corr
# data_RT_anova = ind_data
# data_RT_anova = data_RT_anova[data_RT_anova$RT > 0 & data_RT_anova$RT < 3000,]
#
# data_RT_anova =  aggregate( RT ~ sub*SOA*vField, data = data_RT_anova, FUN = "mean")
#
#
# data_auc_crr =  aggregate( data_y ~ sub*SOA*vField, data = data_auc[data_auc$comp=="toPeak",], FUN = "mean")
# data_auc_crr$RT =  data_RT_anova$RT
#
#
# p = ggplot(data_auc_crr,aes(x=data_y,y=RT,color=vField))+
#   geom_point()
#
#
# data_auc_crr =  aggregate( data_y ~ sub*vField, data = data_auc[data_auc$comp=="Late",], FUN = "mean")
# data_auc_crr = data_auc_crr[order(data_auc_crr$sub),]
# data_auc_crr$th =  dat_th_ind$th
#
# tmp_plot = data_auc_crr[data_auc_crr$vField=="LVF",]
# tmp_plot$AUC = data_auc_crr[data_auc_crr$vField=="LVF",]$data_y - data_auc_crr[data_auc_crr$vField=="RVF",]$data_y
# tmp_plot$th = data_auc_crr[data_auc_crr$vField=="LVF",]$th - data_auc_crr[data_auc_crr$vField=="RVF",]$th
#
# p = ggplot(tmp_plot,aes(x=AUC,y=th,color=vField))+
#   geom_point()
#
# cor.test(tmp_plot$th,tmp_plot$AUC)
# res = lm( AUC ~ th, data=tmp_plot)
# summary(res)
# velocity -----------------------------------------------------------------
tmp_plot =  aggregate( vel ~ sub*vField*SOA, data = data_velocity, FUN = "mean")
tmp_anova = tmp_plot
tmp_plot[tmp_plot$vField == "LVF",]$SOA = tmp_plot[tmp_plot$vField == "LVF",]$SOA - 2
tmp_plot[tmp_plot$vField == "RVF",]$SOA = tmp_plot[tmp_plot$vField == "RVF",]$SOA + 2
config$label_y = "PD change [z/s]"
p_all$pupilVelocity = dispLineGraph(tmp_plot,config, "vel", c("SOA","vField"))
config$xlim = round(seq(-83.3, 33.3,length=8),4)
config$xlim_stride = 5
if(normFlg){
config$ylim = round(seq(-0.6,-0.3,0.1),4)
config$ylim_stride = 0.01
}else{
config$ylim = round(seq(0.1,0.15,0.01),4)
config$ylim_stride = 0.005
}
p_all$pupilVelocity = setEmptyStyle(p_all$pupilVelocity,config)+
scale_x_continuous(breaks=g1) +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust = 1)
)
p_all$pupilVelocity$size = c(4.5,5)
anovakun(tmp_anova,"sAB",long=T, peta=T,gg=T)
# numOfSub = length(unique(tmp_anova$sub))
# numOfCondition = length(unique(tmp_anova$vField))
# tmp_anova = tmp_anova[order(tmp_anova$sub),]
#
# f = data.frame(
#   sub = as.character(unique(tmp_anova$sub)),
#   y = t(matrix(tmp_anova$vel,ncol = numOfSub))
# )
# n1 = paste(g1,"_LVF",sep="")
# n2 = paste(g1,"_RVF",sep="")
#
# colnames(f) <- c("subject", matrix(rbind(n1,n2),nrow=1))
# write.csv(f, paste("./JASP/",date,"/velocity.csv",sep=""),row.names=FALSE)
tmp_anova$SOA = factor(tmp_anova$SOA,levels = unique(tmp_anova$SOA))
tmp_anova$vField = factor(tmp_anova$vField,levels = unique(tmp_anova$vField))
tmp_anova$sub = factor(tmp_anova$sub,levels = unique(tmp_anova$sub))
bf = anovaBF(vel ~ vField*SOA + sub, data=tmp_anova, whichRandom = "sub")
phasicPupilVel_table = list(list(
anovaTab = forDrawingSigANOVA,
bf       = round(exp(bf@bayesFactor[["bf"]]),3)
))
names(phasicPupilVel_table) <- c('phasicPupilVel_table')
anovaTabAll = c(anovaTabAll,phasicPupilVel_table)
# tmp_plot =  aggregate( vel ~ sub*vField, data = data_velocity, FUN = "mean")
# tmp_anova = tmp_plot
#
# numOfSub = length(unique(tmp_anova$sub))
# numOfCondition = length(unique(tmp_anova$vField))
# f = data.frame(
#   sub = as.character(unique(tmp_anova$sub)),
#   y = matrix(tmp_anova$vel,ncol = numOfCondition)
# )
# colnames(f) <- c("subject", matrix(rbind("LVF","RVF"),nrow=1))
# write.csv(f, paste("./JASP/",date,"/velocity.csv",sep=""),row.names=FALSE)
# x = tmp_anova[tmp_anova$vField == "LVF",]$vel
# y = tmp_anova[tmp_anova$vField == "RVF",]$vel
#
# n = length(x)
# bf = ttestBF(x = x, y = y, paired=TRUE)
# round(exp(bf@bayesFactor[["bf"]]),3)
# regression -----------------------------------------------------------------
# reg =  aggregate( data_y ~ sub*vField, data = data_auc[data_auc$comp=="max_min",], FUN = "mean")
# reg$vel = reg$data_y
#
# tmp_plot = data_pupil_res[data_pupil_res$data_x >= 0 & data_pupil_res$data_x <= 2,]
# tmp_plot = aggregate( PDR_res ~ sub*vField, data = tmp_plot, FUN = "mean")
# reg$PDR = tmp_plot$PDR_res
#
# reg$PDR = tmp_plot$PDR_res
#
# data_BP = aggregate( Baseline ~ sub*vField, data = ind_data, FUN = "mean")
# reg$BP = data_BP$Baseline
#
# dat_th_ind = dat_th_ind[order(dat_th_ind$vField),]
# reg$pse = dat_th_ind$th
#
# tmp_plot = gaze_all
# tmp_plot = aggregate(. ~ sub*vField, data = tmp_plot, FUN = "median")
# reg$gazeBias = tmp_plot$x
#
# model = lm( pse ~ PDR + vel + BP + gazeBias, data=reg)
# summary(model)
source("~/Desktop/Github/PupilFLE/Exp1/[Rmd]Results/makeDataSet.R", echo=TRUE)
config$grCol = NULL
config$lim_y = c(-0.5,0.5)
config$lim_x = c(-1,3.55)
config$grCol = c("#D97168","#738CD9")
data_pupil_timeCourse =  aggregate( PDR_res ~ sub*data_x*vField, data = data_pupil_res, FUN = "mean")
p <- disp(data_pupil_timeCourse,config,"PDR",1,c("vField"))
p
WIN_ANALYSIS
config$title = "Baseline pupil size across VFs"
config$label_y = paste("BP size",unitName,sep="")
config$label_x = ""
data_BP = aggregate( Baseline ~ sub*vField*SOA, data = ind_data, FUN = "mean")
data_BP = aggregate( Baseline ~ sub*vField, data = data_BP, FUN = "mean")
p = dispLineGraph(data_BP,config,"Baseline",c("vField"))+
theme(
legend.position="none"
)
p
config$ylim = round(seq(-0.15,-0.1,0.05),4)
config$ylim_stride = 0.005
p = setEmptyStyle(p,config)
p
config$xlim = round(seq(1,2,1),4)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p
tmp_plot = data_pupilAll_res[data_pupilAll_res$data_x >= 0 & data_pupilAll_res$data_x <= 2,]
tmp_plot = aggregate( PDR_res ~ sub*vField*SOA*numOfTrial, data = tmp_plot, FUN = "mean")
data_RT_anova =  aggregate( RT ~ sub*vField*SOA*numOfTrial, data = ind_data, FUN = "mean")
tmp_plot$RT = data_RT_anova$RT
tmp_plot = tmp_plot[tmp_plot$RT > 0 & tmp_plot$RT < 3000,]
tmp_plot =  aggregate( . ~ sub*vField*SOA, data = tmp_plot, FUN = "mean")
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT))+
geom_point()
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT))+
geom_point()
p
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub))+
geom_point()+
facet_wrap(.~sub)
p
model = lmer( RT ~ PDR_res + (1+PDR_res|sub), tmp_plot)
summary(model)
p
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point()
p
tmp_plot$SOA = factor(tmp_plot$SOA,levels = unique(tmp_plot$SOA))
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point()
p
config$xlim = round(seq(-1.5, 1.5),0.5)
config$xlim_stride = 0.05
config$ylim = round(seq(600,1600),200)
config$ylim_stride = 0.005
p = setEmptyStyle(p,config)
p
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point()
# facet_wrap(.~sub)
config$xlim = round(seq(-1.5, 1.5),0.5)
config$xlim_stride = 0.05
config$ylim = round(seq(600,1600),200)
config$ylim_stride = 20
p = setEmptyStyle(p,config)
p
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point()
# facet_wrap(.~sub)
config$xlim = round(seq(-1.5, 1.5,0.5))
config$xlim_stride = 0.05
config$ylim = round(seq(600,1600,200))
config$ylim_stride = 20
p = setEmptyStyle(p,config)
p
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point()
# facet_wrap(.~sub)
config$xlim = round(seq(-1.5, 1.5,0.5))
config$xlim_stride = 0.05
config$ylim = round(seq(400,1600,400))
config$ylim_stride = 40
p = setEmptyStyle(p,config)
p
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point()
# facet_wrap(.~sub)
config$xlim = round(seq(-1.5, 1.5,0.5))
config$xlim_stride = 0.05
config$ylim = round(seq(400,2000,400))
config$ylim_stride = 40
p = setEmptyStyle(p,config)
p
summary(model)
a = summary(model)
View(a)
a[["coefficients"]]
summary(model)["(Intercept)",]
a
summary(model)$coefficients["(Intercept)",]
a = summary(model)$coefficients["(Intercept)",]["Estimate"]
a
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point()+
geom_abline(intercept = summary(model)$coefficients["(Intercept)",]["Estimate"],
slope = summary(model)$coefficients["PDR_res",]["Estimate"])
p
config$xlim = round(seq(-1.5, 1.5,0.5))
config$xlim_stride = 0.05
config$ylim = round(seq(400,2000,400))
config$ylim_stride = 40
p = setEmptyStyle(p,config)
p
seq(-1.5, 1.5,0.5)
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point()+
geom_abline(intercept = summary(model)$coefficients["(Intercept)",]["Estimate"],
slope = summary(model)$coefficients["PDR_res",]["Estimate"])
# facet_wrap(.~sub)
config$xlim = round(seq(-1.5, 1.5,0.5))
config$xlim_stride = 0.05
config$ylim = round(seq(400,2000,400))
config$ylim_stride = 40
p = setEmptyStyle(p,config)
p
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point(size=2)+
geom_abline(intercept = summary(model)$coefficients["(Intercept)",]["Estimate"],
slope = summary(model)$coefficients["PDR_res",]["Estimate"])
# facet_wrap(.~sub)
config$xlim = round(seq(-2,2,1))
config$xlim_stride = 0.1
config$ylim = round(seq(400,2000,400))
config$ylim_stride = 40
p = setEmptyStyle(p,config)
p_all$corr_RT_PDR = p
p_all$corr_RT_PDR$size = c(5.5,5)
p
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point(size=1)+
geom_abline(intercept = summary(model)$coefficients["(Intercept)",]["Estimate"],
slope = summary(model)$coefficients["PDR_res",]["Estimate"])
# facet_wrap(.~sub)
p
config$xlim = round(seq(-2,2,1))
config$xlim_stride = 0.1
config$ylim = round(seq(400,2000,400))
config$ylim_stride = 40
p = setEmptyStyle(p,config)
p_all$corr_RT_PDR = p
p_all$corr_RT_PDR$size = c(5.5,5)
mmName = names(p_all)
for(iFig in 1:length(mmName)){
if("size" %in% names(p_all[[iFig]])){
CairoPDF(file=paste(saveFolder,iFig,"_",mmName[iFig],sep=""),
width=p_all[[iFig]]["size"][[1]][1],height=p_all[[iFig]]["size"][[1]][2],
bg = 'transparent')
}else{
CairoPDF(file=paste(saveFolder,iFig,"_",mmName[iFig],sep=""),
bg = 'transparent')
}
eval(parse(text=paste("print(p_all[[",iFig,"]])",sep="")))
dev.off()
}
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point(size=1,alpha=0.8)+
geom_abline(intercept = summary(model)$coefficients["(Intercept)",]["Estimate"],
slope = summary(model)$coefficients["PDR_res",]["Estimate"])
# facet_wrap(.~sub)
p
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point(size=1,alpha=0.8,shape=16)+
scale_colour_manual(values=c("white")) +
geom_abline(intercept = summary(model)$coefficients["(Intercept)",]["Estimate"],
slope = summary(model)$coefficients["PDR_res",]["Estimate"])
p
p = ggplot(tmp_plot,aes(x=PDR_res,y=RT,group=sub,color=SOA))+
geom_point(size=1,alpha=0.8,shape=16)+
geom_abline(intercept = summary(model)$coefficients["(Intercept)",]["Estimate"],
slope = summary(model)$coefficients["PDR_res",]["Estimate"])
p
dat_th_ind = dat_th_ind[order(dat_th_ind$vField),]
tmp_plot$pse = dat_th_ind$th
# tmp_plot$diff_shape = tmp_plot[tmp_plot$vField == "LVF",]$shape - tmp_plot[tmp_plot$vField == "RVF",]$shape
tmp_plot$diff_shape = tmp_plot[tmp_plot$vField == "LVF",]$x - tmp_plot[tmp_plot$vField == "RVF",]$x
tmp_plot = aggregate(. ~ sub*vField, data = gaze_all, FUN = "median")
dat_th_ind = dat_th_ind[order(dat_th_ind$vField),]
tmp_plot$pse = dat_th_ind$th
# tmp_plot$diff_shape = tmp_plot[tmp_plot$vField == "LVF",]$shape - tmp_plot[tmp_plot$vField == "RVF",]$shape
tmp_plot$diff_shape = tmp_plot[tmp_plot$vField == "LVF",]$x - tmp_plot[tmp_plot$vField == "RVF",]$x
tmp_plot$diff_pse = tmp_plot[tmp_plot$vField == "LVF",]$pse - tmp_plot[tmp_plot$vField == "RVF",]$pse
tmp_plot = tmp_plot[tmp_plot$vField == "LVF",]
model = lm(tmp_plot$diff_shape ~ tmp_plot$diff_pse)
summary(model)
p = ggplot(tmp_plot, aes(x=diff_shape, y=diff_pse,color=sub)) +
geom_point(size=1,alpha=0.8,shape=16)+
geom_abline(aes(intercept=coef(model)["(Intercept)"],slope = coef(model)["tmp_plot$diff_pse"]))
p
p = ggplot(tmp_plot, aes(x=diff_shape, y=diff_pse,color=sub)) +
geom_point(size=2,alpha=0.8,shape=16)
p
config$xlim = round(seq(-4,4,1))
config$xlim_stride = 0.1
config$ylim = round(seq(-100,50,50))
config$ylim_stride = 5
p = setEmptyStyle(p,config)
p
p = setEmptyStyle(p,config) +
theme(
legend.position = 'none'
)
p
View(data_BP)
tmp_plot = data_pupilAll_res[data_pupilAll_res$data_x >= 0 & data_pupilAll_res$data_x <= 2,]
tmp_plot = aggregate( PDR_res ~ sub*vField, data = tmp_plot, FUN = "mean")
View(dat_th_ind)
View(tmp_plot)
tmp_plot$pse = dat_th_ind$th
tmp_plot$diff_pse = tmp_plot[tmp_plot$vField == "LVF",]$pse - tmp_plot[tmp_plot$vField == "RVF",]$pse
tmp_plot$diff_PDR = tmp_plot[tmp_plot$vField == "LVF",]$PDR_res - tmp_plot[tmp_plot$vField == "RVF",]$PDR_res
tmp_plot = tmp_plot[tmp_plot$vField == "LVF",]
p = ggplot(tmp_plot,aes(x = pse, y = PDR_res, group = sub))
tmp_plot = tmp_plot[tmp_plot$vField == "LVF",]
p = ggplot(tmp_plot,aes(x = diff_pse, y = diff_PDR, group = sub))
p = ggplot(tmp_plot,aes(x = diff_pse, y = diff_PDR, group = sub))+
# geom_abline(intercept = res2$coefficients[1],slope = res2$coefficients[2])+
geom_point(shape=16)
p
p = ggplot(tmp_plot,aes(x = diff_pse, y = diff_PDR, color = sub))+
# geom_abline(intercept = res2$coefficients[1],slope = res2$coefficients[2])+
geom_point(shape=16)
p
config$ylim = round(seq(-0.6,0.4,0.2),4)
config$ylim_stride = 0.02
config$xlim = round(seq(-120,120,40),4)
config$xlim_stride = 2
p = setEmptyStyle(p,config) +
theme(
legend.position = 'none'
)
p
model = lm(tmp_plot$diff_PDR ~ tmp_plot$diff_pse)
summary(model)
p = ggplot(tmp_plot,aes(x = diff_pse, y = diff_PDR, color = sub))+
geom_point(shape=16) +
geom_abline(aes(intercept=coef(model)["(Intercept)"],slope = coef(model)["tmp_plot$diff_pse"]))
p
a = summary(model)
View(AUC_table)
View(a)
cor.test(tmp_plot$diff_pse,tmp_plot$diff_PDR)
r = cor.test(tmp_plot$diff_pse,tmp_plot$diff_PDR)
View(r)
r$estimate$cor
r$estimate
p = ggplot(tmp_plot,aes(x = diff_pse, y = diff_PDR, color = sub))+
geom_point(shape=16) +
geom_abline(aes(intercept=coef(model)["(Intercept)"],slope = coef(model)["tmp_plot$diff_pse"])) +
ggtitle(paste("R = ",r$estimate, ", p = ", r$p.value, sep=""))
p
lm(tmp_plot$diff_PDR ~ tmp_plot$diff_pse)
model = lm(tmp_plot$diff_pse ~ tmp_plot$diff_PDR)
model
p = ggplot(tmp_plot,aes(x = diff_pse, y = diff_PDR, color = sub))+
geom_point(shape=16) +
geom_abline(aes(intercept=coef(model)["(Intercept)"],slope = coef(model)["tmp_plot$diff_PDR"])) +
ggtitle(paste("R = ",round(r$estimate,4), ", p = ", round(r$p.value,4), sep=""))
p
coef(model)["tmp_plot$diff_PDR"])
coef(model)["tmp_plot$diff_PDR"]
p
model = lm(tmp_plot$diff_PDR ~ tmp_plot$diff_pse)
p = ggplot(tmp_plot,aes(x = diff_pse, y = diff_PDR, color = sub))+
geom_point(shape=16) +
geom_abline(aes(intercept=coef(model)["(Intercept)"],slope = coef(model)["tmp_plot$diff_pse"])) +
ggtitle(paste("R = ",round(r$estimate,4), ", p = ", round(r$p.value,4), sep=""))
p
tmp_plot = data_pupilAll_res[data_pupilAll_res$data_x >= 0 & data_pupilAll_res$data_x <= 2,]
tmp_plot = aggregate( PDR_res ~ sub*vField, data = tmp_plot, FUN = "mean")
tmp_plot$pse = dat_th_ind$th
config$title = "corr. (phasic vs. th)"
config$label_y = paste("Phasic pupil size",unitName,sep="")
config$label_x = "PSE [ms]"
tmp_plot$diff_pse = tmp_plot[tmp_plot$vField == "LVF",]$pse - tmp_plot[tmp_plot$vField == "RVF",]$pse
tmp_plot$diff_PDR = tmp_plot[tmp_plot$vField == "LVF",]$PDR_res - tmp_plot[tmp_plot$vField == "RVF",]$PDR_res
tmp_plot = tmp_plot[tmp_plot$vField == "LVF",]
model = lm(tmp_plot$diff_PDR ~ tmp_plot$diff_pse)
r = cor.test(tmp_plot$diff_pse,tmp_plot$diff_PDR)
# res2 = lm( phasic ~ th, data=data_BP)
p = ggplot(tmp_plot,aes(x = diff_pse, y = diff_PDR, color = sub))+
geom_point(shape=16) +
geom_abline(aes(intercept=coef(model)["(Intercept)"],slope = coef(model)["tmp_plot$diff_pse"])) +
ggtitle(paste("R = ",round(r$estimate,4), ", p = ", round(r$p.value,4), sep=""))
p
g1 = c(-83.3,-66.7,-50.0,-33.3,-16.7,0,16.7,33.3)
g2 = c("Small","Large","")
vFieldName = c('RVF','LVF')
tGroup = c(-2,-0.5,0,0.55,2.55,3.12)
binName = c("fixation","baseline","moving object","response","ISI")
correctFig = T
nsFlag = T
saveFig = T
#### file loading
date = "20220825"
# date = "no-baseline-correction"
if(correctFig){
rootFolder = "../[Python]PreProcessing/data/corrected/"
dataFolder = paste("./data/corrected/",date,"/",sep="")
saveFolder = paste("./figure/corrected/",date,"/",sep="")
}else{
rootFolder = "../[Python]PreProcessing/data/no-corrected/"
dataFolder = paste("./data/no-correcte/",date,"/",sep="")
saveFolder = paste("./figure/no-corrected/",date,"/",sep="")
}
cfg = fromJSON(file=paste(rootFolder,date,"/cfg_norm.json",sep=''))
WIN_ANALYSIS = round(cfg$WID_ANALYSIS,2)
sTime = cfg$WID_BASELINE[[1]][1]
eTime = round(cfg$WID_ANALYSIS,2)
numOfTertile = cfg$numOfTertile
normFlg = cfg$normFlag
if(!dir.exists(saveFolder)){
dir.create(saveFolder)
}
if(!dir.exists(paste("./JASP/",date,sep=""))){
dir.create(paste("./JASP/",date,sep=""))
}
if(normFlg){
normName="_norm"
unitName = "[z]"
}else{
normName="_mm"
unitName = "[mm]"
}
# average -----------------------------------------------------------------
if(!file.exists(dataFolder)){
source("makeDataSet.R")
}else{
f = list.files(paste("./data/corrected/",date,sep=""), pattern="dataset", full.names=T)
for(fName in f){
load(fName)
}
}
anovaTabAll = list()
p_all = list()
tmp_plot = data_pupilAll_res[data_pupilAll_res$data_x >= 0 & data_pupilAll_res$data_x <= 2,]
tmp_plot = aggregate( PDR_res ~ sub*vField, data = tmp_plot, FUN = "mean")
tmp_plot$pse = dat_th_ind$th
config$title = "corr. (phasic vs. th)"
config$label_y = paste("Phasic pupil size",unitName,sep="")
config$label_x = "PSE [ms]"
tmp_plot$diff_pse = tmp_plot[tmp_plot$vField == "LVF",]$pse - tmp_plot[tmp_plot$vField == "RVF",]$pse
tmp_plot$diff_PDR = tmp_plot[tmp_plot$vField == "LVF",]$PDR_res - tmp_plot[tmp_plot$vField == "RVF",]$PDR_res
tmp_plot = tmp_plot[tmp_plot$vField == "LVF",]
model = lm(tmp_plot$diff_PDR ~ tmp_plot$diff_pse)
r = cor.test(tmp_plot$diff_pse,tmp_plot$diff_PDR)
# res2 = lm( phasic ~ th, data=data_BP)
p = ggplot(tmp_plot,aes(x = diff_pse, y = diff_PDR, color = sub))+
geom_point(shape=16) +
geom_abline(aes(intercept=coef(model)["(Intercept)"],slope = coef(model)["tmp_plot$diff_pse"])) +
ggtitle(paste("R = ",round(r$estimate,4), ", p = ", round(r$p.value,4), sep=""))
p
tmp_plot = data_pupilAll_res[data_pupilAll_res$data_x >= 0 & data_pupilAll_res$data_x <= 2,]
tmp_plot = aggregate( PDR_res ~ sub*vField, data = tmp_plot, FUN = "mean")
tmp_plot$pse = dat_th_ind$th
config$title = "corr. (phasic vs. th)"
config$label_y = paste("Phasic pupil size",unitName,sep="")
config$label_x = "PSE [ms]"
tmp_plot$diff_pse = tmp_plot[tmp_plot$vField == "LVF",]$pse - tmp_plot[tmp_plot$vField == "RVF",]$pse
tmp_plot$diff_PDR = tmp_plot[tmp_plot$vField == "LVF",]$PDR_res - tmp_plot[tmp_plot$vField == "RVF",]$PDR_res
tmp_plot = tmp_plot[tmp_plot$vField == "LVF",]
model = lm(tmp_plot$diff_PDR ~ tmp_plot$diff_pse)
r = cor.test(tmp_plot$diff_pse,tmp_plot$diff_PDR)
# res2 = lm( phasic ~ th, data=data_BP)
p_all$corr_PSE_PDR = ggplot(tmp_plot,aes(x = diff_pse, y = diff_PDR, color = sub))+
geom_point(shape=16) +
geom_abline(aes(intercept=coef(model)["(Intercept)"],slope = coef(model)["tmp_plot$diff_pse"])) +
ggtitle(paste("R = ",round(r$estimate,4), ", p = ", round(r$p.value,4), sep=""))
config$ylim = round(seq(-0.6,0.4,0.2),4)
config$ylim_stride = 0.02
config$xlim = round(seq(-120,120,40),4)
config$xlim_stride = 2
p_all$corr_PSE_PDR = setEmptyStyle(p_all$corr_PSE_PDR,config) +
theme(
legend.position = 'none'
)
p_all$corr_PSE_PDR$size = c(6,5)
