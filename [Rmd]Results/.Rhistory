data_RT_anova = ind_data
data_RT_anova =  aggregate( RT ~ sub*vField, data = data_RT_anova, FUN = "mean")
data_RT_diff = data_RT_anova[data_RT_anova$vField == "RVF",]$RT - data_RT_anova[data_RT_anova$vField == "LVF",]$RT
th_diff = dat_th_ind[dat_th_ind$vField == "RVF",]$th - dat_th_ind[dat_th_ind$vField == "LVF",]$th
dat_corr = data.frame()
for(x in unique(data_pupil$data_x)){
tmp = data_pupil[data_pupil$data_x == x,]
tmp_diff = tmp[tmp$vField == "RVF",]$PDR - tmp[tmp$vField == "LVF",]$PDR
tmp = tmp[tmp$vField == "RVF",]
tmp$RT = data_RT_diff
tmp$th = th_diff
t_RT = cor.test(tmp$RT,tmp$PDR)
t_th = cor.test(tmp$th,tmp$PDR)
dat_corr = rbind(dat_corr,
data.frame(
data_x = x,
tVal_RT = t_RT$statistic,
pVal_RT = t_RT$p.value,
tVal_th = t_th$statistic,
pVal_th = t_th$p.value
))
}
data_pupil_timeCourse =  aggregate( PDR ~ sub*data_x*vField, data = data_pupil, FUN = "mean")
pp1 <- disp(data_pupil_timeCourse,config,"PDR",1,c("vField"))+
geom_vline(xintercept=0.5, color="gray", linetype="dashed")+
geom_vline(xintercept=0, color="gray", linetype="solid")+
theme(
legend.position="none"
)
pp2 = ggplot(dat_corr,aes(x=data_x,y=pVal_RT))+
geom_line()+
# xlab(config$label_x) + ylab(config$label_y) +
coord_cartesian(xlim = config$lim_x,ylim = c(0,1)) +
scale_x_continuous(expand = c(0, 0))
pp3 = ggplot(dat_corr,aes(x=data_x,y=pVal_th))+
geom_line()+
# xlab(config$label_x) + ylab(config$label_y) +
coord_cartesian(xlim = config$lim_x,ylim = c(0,1)) +
scale_x_continuous(expand = c(0, 0))
layout <- rbind(c(1,1),c(2,2),c(3,3))
p = combineGraphs(seq(1,3),'pp',layout)
plot(p)
# Time-course of pupillary response (across VF) ----------------------------------
config$grCol = NULL
data_pupil_timeCourse =  aggregate( PDR ~ sub*data_x*vField*SOA, data = data_pupil, FUN = "mean")
data_pupil_timeCourse =  aggregate( PDR ~ sub*data_x*vField, data = data_pupil_timeCourse, FUN = "mean")
data_RT_ave = ind_data
# data_RT_ave = ind_data[ind_data$RT > 0 & ind_data$RT < 3000,]
data_RT_ave =  aggregate( RT ~ sub*SOA*vField, data = data_RT_ave, FUN = "mean")
data_RT_ave = aggregate( RT ~ sub*vField, data = data_RT_ave, FUN = 'mean')
data_RT_ave$vField = "average"
p <- disp(data_pupil_timeCourse,config,"PDR",1,c("vField"))+
geom_vline(xintercept=0.5, color="gray", linetype="dashed")+
geom_vline(xintercept=0, color="gray", linetype="solid")+
geom_vline(xintercept=mean(data_RT_ave$RT)/1000, color="gray50", linetype="solid")
config$xlim = c(sTime,round(seq(0,eTime,0.5),4))
config$xlim_stride = 0.05
if(normFlg){
config$ylim = round(seq(-0.1,0.8,0.1),4)
config$ylim_stride = 0.02
}else{
config$ylim = round(seq(-0.05,0.3,0.05),4)
config$ylim_stride = 0.005
}
p = setEmptyStyle(p,config)
p = p + scale_x_continuous(breaks=config$xlim)
p_all$pupilAverageVFs = p
# Time-course of pupillary response (res locked) ----------------------------------
config$grCol = NULL
config$lim_y = c(-0.5,0.5)
config$lim_x = c(-1,3.55)
config$grCol = c("#D97168","#738CD9")
data_pupil_timeCourse =  aggregate( PDR_res ~ sub*data_x*vField, data = data_pupil_res, FUN = "mean")
p <- disp(data_pupil_timeCourse,config,"PDR",1,c("vField"))
config$xlim = c(sTime,round(seq(0,2,0.5),4))
config$xlim_stride = 0.05
if(normFlg){
config$ylim = round(seq(-0.4,0.4,0.1),4)
config$ylim_stride = 0.02
}else{
config$ylim = round(seq(-0.05,0.3,0.05),4)
config$ylim_stride = 0.005
}
p = setEmptyStyle(p,config)
p = p + scale_x_continuous(breaks=config$xlim)
p_all$pupiTimeCourseResLocked = p
p_all$pupiTimeCourseResLocked$size = c(4.5,5)
# Averaged pupillary response (res locked) ----------------------------------
config$title = ""
model1 <- deriv(~b0+b1*x, namevec = c("b0","b1"), function.arg = c("x","b0","b1"))
model2 <- deriv(~b0+b1*x+b2*x^2, namevec = c("b0","b1","b2"), function.arg = c("x","b0","b1","b2"))
tmp_plot = data_pupil_res[data_pupil_res$data_x >= 0 & data_pupil_res$data_x <= 2,]
tmp_plot = aggregate( PDR_res ~ sub*vField*SOA, data = tmp_plot, FUN = "mean")
tmp_anova = tmp_plot
data_curve = data.frame()
for (ivField in unique(tmp_anova$vField)){
candi_model1 <- nlmer( PDR_res ~ model1(SOA,b0,b1)~(b0|sub), tmp_anova[tmp_anova$vField == ivField,], start = c(b0 = 0, b1 = 0))
candi_model2 <- nlmer( PDR_res ~ model2(SOA,b0,b1,b2) ~ (b0|sub), tmp_anova[tmp_anova$vField == ivField,], start = c(b0 = 0, b1 = 0, b2=0) )
if (AIC(candi_model1) > AIC(candi_model2)){
model = candi_model2
m = function(model,x){return(fixef(model)[1] + fixef(model)[2]*x + fixef(model)[3]*x^2)}
tVal = summary(candi_model2)[["coefficients"]]["b2",]["t value"]
}else{
model = candi_model1
m = function(model,x){return(fixef(model)[1] + fixef(model)[2]*x)}
tVal = summary(candi_model2)[["coefficients"]]["b1",]["t value"]
}
# summary(model)
df <- data.frame(x = seq(-83.3, 33.3, length = 1000))
tmp = data.frame(
x = df$x,
# yy = predict(model, df),
yy = m(candi_model2, x = seq(-83.3, 33.3, length = 1000)),
b = fixef(model)[length(fixef(model))],
t = tVal,
vField = ivField
)
data_curve = rbind(data_curve,tmp)
}
tmp_plot[tmp_plot$vField == "LVF",]$SOA = tmp_plot[tmp_plot$vField == "LVF",]$SOA - 2
tmp_plot[tmp_plot$vField == "RVF",]$SOA = tmp_plot[tmp_plot$vField == "RVF",]$SOA + 2
p <- dispLineGraph(tmp_plot, config, "PDR_res", c("SOA","vField"))+
geom_line(data = data_curve, aes(x=x,y=yy)) +
geom_text(data = tmp_plot_weight,
aes(x = 8, y = 0.13,
label=paste0('beta = ',round(b,digits = 4),',t = ',round(t,digits = 4))),
position=position_jitter(width=0,height=0.06),size = 3)
p <- dispLineGraph(tmp_plot, config, "PDR_res", c("SOA","vField"))+
geom_line(data = data_curve, aes(x=x,y=yy)) +
geom_text(data = tmp_plot_weight,
aes(x = 8, y = 0.13,
label=paste0('beta = ',round(b,digits = 4),',t = ',round(t,digits = 4))),
position=position_jitter(width=0,height=0.06),size = 3)
countFigNum = 1
# config$grCol = c("gray30")
# RT ----------------------------------------------------------------------
config$grCol = c("#D97168","#738CD9")
data_RT_anova = ind_data
# data_RT_anova = data_RT_anova[data_RT_anova$RT > 0 & data_RT_anova$RT < 3000,]
# data_RT_anova = rejectOutlier(data_RT_anova,"RT")
data_RT_anova =  aggregate( RT ~ sub*SOA*vField, data = data_RT_anova, FUN = "mean")
model1 <- deriv(~b0+b1*x, namevec = c("b0","b1"), function.arg = c("x","b0","b1"))
model2 <- deriv(~b0+b1*x+b2*x^2, namevec = c("b0","b1","b2"), function.arg = c("x","b0","b1","b2"))
data_curve = data.frame()
for (ivField in unique(data_RT_anova$vField)){
candi_model1 <- nlmer( RT ~ model1(SOA,b0,b1)~(b0|sub), data_RT_anova[data_RT_anova$vField == ivField,], start = c(b0 = 0, b1 = 0))
candi_model2 <- nlmer( RT ~ model2(SOA,b0,b1,b2) ~ (b0|sub), data_RT_anova[data_RT_anova$vField == ivField,], start = c(b0 = 0, b1 = 0, b2=0) )
if (AIC(candi_model1) > AIC(candi_model2)){
model = candi_model2
m = function(model,x){return(fixef(model)[1] + fixef(model)[2]*x + fixef(model)[3]*x^2)}
tVal = summary(candi_model2)[["coefficients"]]["b2",]["t value"]
}else{
model = candi_model1
m = function(model,x){return(fixef(model)[1] + fixef(model)[2]*x)}
tVal = summary(candi_model2)[["coefficients"]]["b1",]["t value"]
}
df <- data.frame(x = seq(-83.3, 33.3, length = 1000))
tmp = data.frame(
x = df$x,
# yy = predict(model, df),
yy = m(candi_model2, x = seq(-83.3, 33.3, length = 1000)),
b = fixef(model)[length(fixef(model))],
t = tVal,
vField = ivField
)
data_curve = rbind(data_curve,tmp)
}
tmp_plot = data_RT_anova
tmp_plot[tmp_plot$vField == "LVF",]$SOA = tmp_plot[tmp_plot$vField == "LVF",]$SOA - 2
tmp_plot[tmp_plot$vField == "RVF",]$SOA = tmp_plot[tmp_plot$vField == "RVF",]$SOA + 2
tmp_plot_weight =  aggregate( . ~ vField, data = data_curve, FUN = "mean")
p = dispLineGraph(tmp_plot,config, "RT", c("SOA","vField")) +
geom_line(data = data_curve, aes(x=x,y=yy)) +
ylab("RT [ms]") +
ggtitle('----- RT') +
geom_text(data = tmp_plot_weight,
aes(x = 8, y = 930,
label=paste0('beta = ',round(b,digits = 4),',t = ',round(t,digits = 4))),
position=position_jitter(width=0,height=20),size = 3) +
scale_x_continuous(breaks = unique(data_e1$SOA), expand = c(0.05, 0.05))
# facet_grid(. ~ vField)
config$xlim = round(seq(-83.3, 33.3,length=8),4)
config$xlim_stride = 5
config$ylim = round(seq(900,1100,100),4)
config$ylim_stride = 10
p = setEmptyStyle(p,config)
p <- p +
scale_x_continuous(breaks=g1)+
theme(
legend.position = 'none',
axis.text.x = element_text(angle = 30, hjust = 1)
)
p_all$RT = p
p_all$RT$size = c(4.5,5)
anovakun(data_RT_anova,"sAB",long=T, peta=T)
tableRT = forDrawingSigANOVA
data_RT_anova$SOA = factor(data_RT_anova$SOA,levels = unique(data_RT_anova$SOA))
data_RT_anova$vField = factor(data_RT_anova$vField,levels = unique(data_RT_anova$vField))
data_RT_anova$sub = factor(data_RT_anova$sub,levels = unique(data_RT_anova$sub))
tableRT_bf = anovaBF(RT ~ SOA*vField + sub, data=data_RT_anova, whichRandom = "sub")
RT_table = list(list(
anovaTab = forDrawingSigANOVA,
bf       = round(exp(tableRT_bf@bayesFactor[["bf"]]),3)
))
names(RT_table) <- c('RT_table')
anovaTabAll = c(anovaTabAll,RT_table)
countFigNum = 1
#### file loading
config <- list(lim_x = c(sTime,eTime),
# lim_y = c(4,6),
lim_y = c(-0.05,0.5),
alpha = 0.1,
stride = 0.1,
label_x = "Time [sec]",
label_y = paste0("Pupil size",unitName),
title = "averaged across VFs",
linetype = FALSE,
line = F
)
# Time-course of pupillary response --------------------------------------------------
config$grCol = NULL
data_pupil_timeCourse =  aggregate( PDR ~ sub*data_x*vField*SOA, data = data_pupil, FUN = "mean")
p <- disp(data_pupil_timeCourse,config,"PDR",1,c("SOA","vField"))+
facet_grid(. ~ vField)+
ggtitle("each VF and lags")+
geom_vline(xintercept=0.5, color="gray", linetype="dashed")+
geom_vline(xintercept=0, color="gray", linetype="solid")
config$xlim = c(sTime,round(seq(0,eTime,0.5),4))
config$xlim_stride = 0.05
if(normFlg){
config$ylim = round(seq(-0.1,0.8,0.1),4)
config$ylim_stride = 0.02
}else{
config$ylim = round(seq(-0.05,0.3,0.05),4)
config$ylim_stride = 0.005
}
p = setEmptyStyle(p,config)
p = p + scale_x_continuous(breaks=config$xlim)
theme(
axis.text.x = element_text(angle = 30, hjust = 1)
)
p_all$pupilTimeCourse = p
# Average ------------------------------------------------------------
config$grCol = c("#D97168","#738CD9")
data_pupilAve = data_pupil[data_pupil$data_x > 0 & data_pupil$data_x < WIN_ANALYSIS,]
data_pupilAve = aggregate( PDR ~ sub*vField*SOA, data = data_pupil, FUN = "mean")
# Time-course of corr. with RT ----------------------------------
data_pupilAve = aggregate( PDR ~ sub*vField, data = data_pupil, FUN = "mean")
### trial at more than 3000ms is rejected
# data_RT_anova = ind_data[ind_data$RT > 0 & ind_data$RT < 3000,]
data_RT_anova = ind_data
data_RT_anova =  aggregate( RT ~ sub*vField, data = data_RT_anova, FUN = "mean")
data_RT_diff = data_RT_anova[data_RT_anova$vField == "RVF",]$RT - data_RT_anova[data_RT_anova$vField == "LVF",]$RT
th_diff = dat_th_ind[dat_th_ind$vField == "RVF",]$th - dat_th_ind[dat_th_ind$vField == "LVF",]$th
dat_corr = data.frame()
for(x in unique(data_pupil$data_x)){
tmp = data_pupil[data_pupil$data_x == x,]
tmp_diff = tmp[tmp$vField == "RVF",]$PDR - tmp[tmp$vField == "LVF",]$PDR
tmp = tmp[tmp$vField == "RVF",]
tmp$RT = data_RT_diff
tmp$th = th_diff
t_RT = cor.test(tmp$RT,tmp$PDR)
t_th = cor.test(tmp$th,tmp$PDR)
dat_corr = rbind(dat_corr,
data.frame(
data_x = x,
tVal_RT = t_RT$statistic,
pVal_RT = t_RT$p.value,
tVal_th = t_th$statistic,
pVal_th = t_th$p.value
))
}
data_pupil_timeCourse =  aggregate( PDR ~ sub*data_x*vField, data = data_pupil, FUN = "mean")
pp1 <- disp(data_pupil_timeCourse,config,"PDR",1,c("vField"))+
geom_vline(xintercept=0.5, color="gray", linetype="dashed")+
geom_vline(xintercept=0, color="gray", linetype="solid")+
theme(
legend.position="none"
)
pp2 = ggplot(dat_corr,aes(x=data_x,y=pVal_RT))+
geom_line()+
# xlab(config$label_x) + ylab(config$label_y) +
coord_cartesian(xlim = config$lim_x,ylim = c(0,1)) +
scale_x_continuous(expand = c(0, 0))
pp3 = ggplot(dat_corr,aes(x=data_x,y=pVal_th))+
geom_line()+
# xlab(config$label_x) + ylab(config$label_y) +
coord_cartesian(xlim = config$lim_x,ylim = c(0,1)) +
scale_x_continuous(expand = c(0, 0))
layout <- rbind(c(1,1),c(2,2),c(3,3))
p = combineGraphs(seq(1,3),'pp',layout)
plot(p)
# Time-course of pupillary response (across VF) ----------------------------------
config$grCol = NULL
data_pupil_timeCourse =  aggregate( PDR ~ sub*data_x*vField*SOA, data = data_pupil, FUN = "mean")
data_pupil_timeCourse =  aggregate( PDR ~ sub*data_x*vField, data = data_pupil_timeCourse, FUN = "mean")
data_RT_ave = ind_data
# data_RT_ave = ind_data[ind_data$RT > 0 & ind_data$RT < 3000,]
data_RT_ave =  aggregate( RT ~ sub*SOA*vField, data = data_RT_ave, FUN = "mean")
data_RT_ave = aggregate( RT ~ sub*vField, data = data_RT_ave, FUN = 'mean')
data_RT_ave$vField = "average"
p <- disp(data_pupil_timeCourse,config,"PDR",1,c("vField"))+
geom_vline(xintercept=0.5, color="gray", linetype="dashed")+
geom_vline(xintercept=0, color="gray", linetype="solid")+
geom_vline(xintercept=mean(data_RT_ave$RT)/1000, color="gray50", linetype="solid")
config$xlim = c(sTime,round(seq(0,eTime,0.5),4))
config$xlim_stride = 0.05
if(normFlg){
config$ylim = round(seq(-0.1,0.8,0.1),4)
config$ylim_stride = 0.02
}else{
config$ylim = round(seq(-0.05,0.3,0.05),4)
config$ylim_stride = 0.005
}
p = setEmptyStyle(p,config)
p = p + scale_x_continuous(breaks=config$xlim)
p_all$pupilAverageVFs = p
# Time-course of pupillary response (res locked) ----------------------------------
config$grCol = NULL
config$lim_y = c(-0.5,0.5)
config$lim_x = c(-1,3.55)
config$grCol = c("#D97168","#738CD9")
data_pupil_timeCourse =  aggregate( PDR_res ~ sub*data_x*vField, data = data_pupil_res, FUN = "mean")
p <- disp(data_pupil_timeCourse,config,"PDR",1,c("vField"))
config$xlim = c(sTime,round(seq(0,2,0.5),4))
config$xlim_stride = 0.05
if(normFlg){
config$ylim = round(seq(-0.4,0.4,0.1),4)
config$ylim_stride = 0.02
}else{
config$ylim = round(seq(-0.05,0.3,0.05),4)
config$ylim_stride = 0.005
}
p = setEmptyStyle(p,config)
p = p + scale_x_continuous(breaks=config$xlim)
p_all$pupiTimeCourseResLocked = p
p_all$pupiTimeCourseResLocked$size = c(4.5,5)
# Averaged pupillary response (res locked) ----------------------------------
config$title = ""
model1 <- deriv(~b0+b1*x, namevec = c("b0","b1"), function.arg = c("x","b0","b1"))
model2 <- deriv(~b0+b1*x+b2*x^2, namevec = c("b0","b1","b2"), function.arg = c("x","b0","b1","b2"))
tmp_plot = data_pupil_res[data_pupil_res$data_x >= 0 & data_pupil_res$data_x <= 2,]
tmp_plot = aggregate( PDR_res ~ sub*vField*SOA, data = tmp_plot, FUN = "mean")
tmp_anova = tmp_plot
data_curve = data.frame()
for (ivField in unique(tmp_anova$vField)){
candi_model1 <- nlmer( PDR_res ~ model1(SOA,b0,b1)~(b0|sub), tmp_anova[tmp_anova$vField == ivField,], start = c(b0 = 0, b1 = 0))
candi_model2 <- nlmer( PDR_res ~ model2(SOA,b0,b1,b2) ~ (b0|sub), tmp_anova[tmp_anova$vField == ivField,], start = c(b0 = 0, b1 = 0, b2=0) )
if (AIC(candi_model1) > AIC(candi_model2)){
model = candi_model2
m = function(model,x){return(fixef(model)[1] + fixef(model)[2]*x + fixef(model)[3]*x^2)}
tVal = summary(candi_model2)[["coefficients"]]["b2",]["t value"]
}else{
model = candi_model1
m = function(model,x){return(fixef(model)[1] + fixef(model)[2]*x)}
tVal = summary(candi_model2)[["coefficients"]]["b1",]["t value"]
}
# summary(model)
df <- data.frame(x = seq(-83.3, 33.3, length = 1000))
tmp = data.frame(
x = df$x,
# yy = predict(model, df),
yy = m(candi_model2, x = seq(-83.3, 33.3, length = 1000)),
b = fixef(model)[length(fixef(model))],
t = tVal,
vField = ivField
)
data_curve = rbind(data_curve,tmp)
}
tmp_plot[tmp_plot$vField == "LVF",]$SOA = tmp_plot[tmp_plot$vField == "LVF",]$SOA - 2
tmp_plot[tmp_plot$vField == "RVF",]$SOA = tmp_plot[tmp_plot$vField == "RVF",]$SOA + 2
p <- dispLineGraph(tmp_plot, config, "PDR_res", c("SOA","vField"))+
geom_line(data = data_curve, aes(x=x,y=yy)) +
geom_text(data = tmp_plot_weight,
aes(x = 8, y = 0.13,
label=paste0('beta = ',round(b,digits = 4),',t = ',round(t,digits = 4))),
position=position_jitter(width=0,height=0.06),size = 3)
config$xlim = round(seq(-83.3, 33.3,length=8),4)
config$xlim_stride = 5
config$ylim = round(seq(-0.1,0.2,0.05),4)
config$ylim_stride = 0.005
p = setEmptyStyle(p,config)+
scale_x_continuous(breaks=g1) +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust = 1)
)
p_all$pupilAverageResLocked = p
p_all$pupilAverageResLocked$size = c(4.5,5)
anovakun(tmp_anova,"sAB",long=T, peta=T)
tableAvePupilVF = forDrawingSigANOVA
tmp_anova$SOA = factor(tmp_anova$SOA,levels = unique(tmp_anova$SOA))
tmp_anova$vField = factor(tmp_anova$vField,levels = unique(tmp_anova$vField))
tmp_anova$sub = factor(tmp_anova$sub,levels = unique(tmp_anova$sub))
tableAvePupilVF_bf = anovaBF(PDR_res ~ vField*SOA + sub, data=tmp_anova, whichRandom = "sub")
phasicPupil_table = list(list(
anovaTab = forDrawingSigANOVA,
bf       = round(exp(tableAvePupilVF_bf@bayesFactor[["bf"]]),3)
))
names(phasicPupil_table) <- c('phasicPupil_table')
anovaTabAll = c(anovaTabAll,phasicPupil_table)
# Corr. between RT and Pupil change ----------------------------------
tmp_plot = data_pupilAll_res[data_pupilAll_res$data_x >= 0 & data_pupilAll_res$data_x <= 2,]
tmp_plot = aggregate( PDR_res ~ sub*vField*SOA*numOfTrial, data = tmp_plot, FUN = "mean")
data_RT_anova =  aggregate( RT ~ sub*vField*SOA*numOfTrial, data = ind_data, FUN = "mean")
tmp_plot$RT = data_RT_anova$RT
source("~/Desktop/Github/FLI-Anisotropy/[Rmd]Results/makeDataSet.R", echo=TRUE)
data_RT_anova = ind_data
data_RT_anova = data_RT_anova[data_RT_anova$RT > 0 & data_RT_anova$RT < 3000,]
data_RT_anova =  aggregate( RT ~ sub*SOA*vField, data = data_RT_anova, FUN = "mean")
source("~/Desktop/Github/FLI-Anisotropy/[Rmd]Results/makeDataSet.R", echo=TRUE)
source("~/Desktop/Github/FLI-Anisotropy/[Rmd]Results/makeDataSet.R", echo=TRUE)
source("~/Desktop/Github/FLI-Anisotropy/[Rmd]Results/makeDataSet.R", echo=TRUE)
source("~/Desktop/Github/FLI-Anisotropy/[Rmd]Results/makeDataSet.R", echo=TRUE)
View(data_pupil)
----------------------------------------------------
tmp_plot =  aggregate( PDR ~ sub*data_x, data = data_pupil, FUN = "mean")
tmp_plot =  aggregate( PDR ~ sub*data_x, data = data_pupil, FUN = "mean")
p <- ggplot(tmp_plot,aes(x=data_x, y=PDR, group=interaction(sub)),color="blue")+
geom_line(color="black")+
geom_point(data=minLatency,aes(x=min,y=ave_min_y),alpha=0.5,size=2,shape=16,color="red")+
geom_point(data=minLatency,aes(x=max,y=ave_max_y),alpha=0.5,size=2,shape=16,color="blue")+
xlab("Time [sec]")+
ylab(paste0("Pupil size",unitName))+
# geom_hline(data=data_auc[data_auc$comp == "Late",],aes(yintercept=minVal), color="gray50", linetype="solid")+
geom_hline(yintercept=0, color="black", linetype="solid")+
facet_wrap(sub~.)
p
4.1461/3.6408
3.6408/4.1461
g1 = c(-83.3,-66.7,-50.0,-33.3,-16.7,0,16.7,33.3)
g2 = c("Small","Large","")
vFieldName = c('RVF','LVF')
tGroup = c(-2,-0.5,0,0.55,2.55,3.12)
binName = c("fixation","baseline","moving object","response","ISI")
correctFig = T
nsFlag = T
saveFig = T
#### file loading
rootFolder = "../[Python]PreProcessing/data/"
folderName = list.files(rootFolder, full.names=T)
folderName = folderName[length(folderName)]
date = unlist(strsplit(folderName,"/"))
date = date[length(date)]
dataFolder = paste0("./data/",date,"/")
saveFolder = paste0("./figure/",date,"/")
cfg = fromJSON(file=paste0(rootFolder,date,"/cfg_norm.json"))
WIN_ANALYSIS = round(cfg$WID_ANALYSIS,2)
sTime = cfg$WID_BASELINE[[1]][1]
eTime = round(cfg$WID_ANALYSIS,2)
numOfTertile = cfg$numOfTertile
normFlg = cfg$normFlag
if(!dir.exists(saveFolder)){
dir.create(saveFolder)
}
if(!dir.exists(paste0("./JASP/",date))){
dir.create(paste0("./JASP/",date))
}
if(normFlg){
normName="_norm"
unitName = "[z]"
}else{
normName="_mm"
unitName = "[mm]"
}
# average -----------------------------------------------------------------
if(!file.exists(dataFolder)){
source("makeDataSet.R")
}else{
f = list.files(paste0("./data/",date), pattern="dataset", full.names=T)
for(fName in f){
load(fName)
}
}
anovaTabAll = list()
p_all = list()
tmp_data_BP = data_pupilAll_res[data_pupilAll_res$data_x >= -0.5 & data_pupilAll_res$data_x <= 0,]
tmp_data_BP =  aggregate( . ~ sub*vField, data = tmp_data_BP, FUN = "mean")
tmp_plot = data_pupilAll_res[data_pupilAll_res$data_x >= 0 & data_pupilAll_res$data_x <= 2,]
# tmp_plot = aggregate( PDR_res ~ sub*vField*SOA*numOfTrial, data = tmp_plot, FUN = "mean")
tmp_plot = aggregate( PDR_res ~ sub*vField, data = tmp_plot, FUN = "mean")
tmp_dataVel =  aggregate( vel ~ sub*vField, data = data_velocity, FUN = "mean")
# tmp_data_RT =  aggregate( RT ~ sub*vField*SOA*numOfTrial, data = ind_data, FUN = "mean")
tmp_data_RT =  aggregate( RT ~ sub*vField, data = ind_data, FUN = "mean")
tmp_plot$vel = tmp_dataVel$vel
tmp_plot$BP = tmp_data_BP$PDR_res
tmp_data_PDR = data_pupilAll_res[data_pupilAll_res$data_x >= 0 & data_pupilAll_res$data_x <= 2,]
tmp_data_PDR = aggregate( PDR_res ~ sub*vField, data = tmp_data_PDR, FUN = "mean")
tmp_data_gaze = aggregate(. ~ sub*vField, data = gaze_all, FUN = "median")
tmp_plot$gazeBias = tmp_data_gaze$x
tmp_plot$pse = dat_th_ind$th
tmp_plot$RT = tmp_data_RT$RT
View(tmp_plot)
p=ggplot(tmp_plot)+
geom_point(aes(x=PDR_res,y=pse))
p
tmp_plot0 = gather(tmp_plot,key=ID2,value=value)
View(tmp_plot0)
tmp_plot0 = gather(tmp_plot,key=ID2,value=value,PDR_res:RT)
View(tmp_plot0)
for(mmName1 in names(tmp_plot[3:length(tmp_plot)])){
eval(parse(text=paste0("tmp_plot[tmp_plot$vField == 'LVF',]$",mmName1,
" = tmp_plot[tmp_plot$vField == 'LVF',]$",mmName1,
" - tmp_plot[tmp_plot$vField == 'RVF',]$",mmName1)))
}
tmp_plot = tmp_plot[tmp_plot$vField == 'LVF',]
tmp_plot$sub = NULL
tmp_plot$vField = NULL
tmp_plot0 = gather(tmp_plot,key=ID2,value=value,PDR_res:RT)
p=ggplot(tmp_plot,aes(group=))+
geom_point(aes(x=PDR_res,y=pse))
View(tmp_plot0)
